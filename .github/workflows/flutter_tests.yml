name: Flutter Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - android
        - ios
        - web
        - desktop

env:
  FLUTTER_VERSION: '3.19.0'

jobs:
  # Unit Tests and Static Analysis
  analyze_and_test:
    name: Analyze and Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze project source
        run: flutter analyze

      - name: Run unit tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Android Tests
  android_tests:
    name: Android Tests
    runs-on: ubuntu-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Create Android emulator
        run: |
          echo "Creating Android emulator..."
          $ANDROID_HOME/emulator/emulator -list-avds
          echo "Available AVDs listed above"
          echo "Creating new AVD..."
          $ANDROID_HOME/tools/bin/avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86"
          echo "AVD created successfully"

      - name: Start Android emulator
        run: |
          echo "Starting Android emulator..."
          $ANDROID_HOME/emulator/emulator -avd test_avd -no-audio -no-window &
          echo "Waiting for emulator to start..."
          $ANDROID_HOME/platform-tools/adb wait-for-device
          echo "Emulator is ready"

      - name: Run integration tests on Android
        run: |
          flutter test integration_test/ -d android
        timeout-minutes: 15

      - name: Run Patrol tests on Android
        run: |
          flutter test patrol_test.dart -d android
        timeout-minutes: 10

  # iOS Tests
  ios_tests:
    name: iOS Tests
    runs-on: macos-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Setup iOS Simulator
        run: |
          echo "Setting up iOS Simulator..."
          xcrun simctl list devices
          echo "Available devices listed above"
          echo "Creating new simulator..."
          xcrun simctl create "iPhone 15 Pro" "iPhone 15 Pro" "iOS17.0"
          echo "Simulator created successfully"

      - name: Start iOS Simulator
        run: |
          echo "Starting iOS Simulator..."
          xcrun simctl boot "iPhone 15 Pro"
          echo "Waiting for simulator to start..."
          xcrun simctl bootstatus "iPhone 15 Pro"
          echo "Simulator is ready"

      - name: Run integration tests on iOS
        run: |
          flutter test integration_test/ -d "iPhone 15 Pro"
        timeout-minutes: 15

      - name: Run Patrol tests on iOS
        run: |
          flutter test patrol_test.dart -d "iPhone 15 Pro"
        timeout-minutes: 10

  # Web Tests
  web_tests:
    name: Web Tests
    runs-on: ubuntu-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Enable web support
        run: flutter config --enable-web

      - name: Run integration tests on web
        run: |
          flutter test integration_test/ -d web-server --web-port 8080
        timeout-minutes: 10

      - name: Run Patrol tests on web
        run: |
          flutter test patrol_test.dart -d web-server --web-port 8080
        timeout-minutes: 10

  # macOS Tests
  macos_tests:
    name: macOS Tests
    runs-on: macos-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run integration tests on macOS
        run: |
          flutter test integration_test/ -d macos
        timeout-minutes: 10

      - name: Run Patrol tests on macOS
        run: |
          flutter test patrol_test.dart -d macos
        timeout-minutes: 10

    # Windows Tests
  windows_tests:
    name: Windows Tests
    runs-on: windows-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run integration tests on Windows
        run: |
          flutter test integration_test/ -d windows
        timeout-minutes: 10

      - name: Run Patrol tests on Windows
        run: |
          flutter test patrol_test.dart -d windows
        timeout-minutes: 10

  # Linux Tests
  linux_tests:
    name: Linux Tests
    runs-on: ubuntu-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libblkid-dev liblzma-dev

      - name: Run integration tests on Linux
        run: |
          flutter test integration_test/ -d linux
        timeout-minutes: 10

      - name: Run Patrol tests on Linux
        run: |
          flutter test patrol_test.dart -d linux
        timeout-minutes: 10

  # Build Tests
  build_tests:
    name: Build Tests
    runs-on: ubuntu-latest
    needs: analyze_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Enable web support
        run: flutter config --enable-web

      - name: Build for web
        run: flutter build web

      - name: Build for Android
        run: flutter build apk --debug

      - name: Build for iOS (macOS only)
        if: runner.os == 'macOS'
        run: flutter build ios --debug

      - name: Build for macOS
        if: runner.os == 'macOS'
        run: flutter build macos

      - name: Build for Windows
        if: runner.os == 'Windows'
        run: flutter build windows

      - name: Build for Linux
        if: runner.os == 'Linux'
        run: flutter build linux

  # Test Summary
  test_summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [android_tests, ios_tests, web_tests, macos_tests, windows_tests, linux_tests, build_tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate test summary
        run: |
          echo "## ðŸ§ª Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Completed Tests:" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: âœ… Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Tests**: ${{ needs.android_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Tests**: ${{ needs.ios_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Tests**: ${{ needs.web_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS Tests**: ${{ needs.macos_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows Tests**: ${{ needs.windows_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linux Tests**: ${{ needs.linux_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tests**: ${{ needs.build_tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“± Test Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: All major functionality tested" >> $GITHUB_STEP_SUMMARY
          echo "- **Patrol Tests**: Advanced testing scenarios covered" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-Platform**: Tests run on all supported platforms" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Verification**: All platform builds verified" >> $GITHUB_STEP_SUMMARY

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            build/
          retention-days: 7

  # Performance Tests (Optional)
  performance_tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: analyze_and_test
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          flutter test --coverage --coverage-path=coverage/performance
          echo "Performance tests completed"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: coverage/performance
          retention-days: 30
